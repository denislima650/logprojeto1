import os, sys
from time import sleep
from selenium import webdriver
from PIL import Image
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import datetime
import urllib.request
class baixa_mapas:
    def __init__(self):
        self.data = datetime.datetime.today().strftime("%Y%m%d")
        self.browser = self.login_site()
        self.dictmodeloespecifico = {'gfs-suite':{'120': '0', '240': '40', '360': '80'}, 'gfs-ens-suite': {'120': '0', '240': '32', '360': '52'},
        'ecmwf-suite': {'120': '0', '240': '24'},'ecmwf-eps-suite': {'120': '0', '240': '20', '360': '40'}, 'cmc-ens-suite': {'120': '0', '240': '20', '360': '40'}}
    def login_site(self): #função responsável por fazer login no site
        ##logando no site
        browser = webdriver.Chrome()
        browser.get('https://www.stormvistawxmodels.com/')
        login = browser.find_element(By.ID, 'edit-name')
        login.click()
        sleep(4)
        login.send_keys("cecl@uol.com.br")
        sleep(4)
        login = browser.find_element(By.ID, 'edit-pass')
        login.click()
        sleep(4)
        login.send_keys("Lutfalla2")
        login = browser.find_element(By.ID, 'edit-submit')
        login.click()
        sleep(4)
        return browser
    def mapaesp(self, modelos, horario, mapas): #baixa um único mapa, de um horário e modelo específicos, que devem ser passados via parâmetro
        for mapa in mapas:
            for modelo in modelos:
                for hora in horario:
                    mapas1 = self.dictmodeloespecifico[modelo]
                    idtime = mapas1[mapa]
                    try:
                        if modelo == 'cmc-ens-suite':
                            self.browser.get(f'https://www.stormvistawxmodels.com/sv/model/{modelo}/{hora}/sa/3-120-hr-accumulated-qpf')
                            idimage = '17'
                        else:
                            self.browser.get(
                                f'https://www.stormvistawxmodels.com/sv/model/{modelo}/{hora}/brazil/3-120-hr-accumulated-qpf')
                            idimage = '99'
                        sleep(4)
                        img1 = self.browser.find_element(By.ID, f"time-{idtime}")
                        img1.click()
                        sleep(4)
                        um = self.browser.find_element(By.ID, f'image-overlay-{idimage}')
                        Image1 = self.browser.get_screenshot_as_file(r"C:\Log\OneDrive - GALAPAGOS CAPITAL\Documentos\recorte.png")
                        Img = Image.open(r"C:\Log\OneDrive - GALAPAGOS CAPITAL\Documentos\recorte.png")
                        croppedIm = Img.crop((65, 115, 1000, 985))
                        root_directory = (fr'C:\Log\OneDrive - GALAPAGOS CAPITAL\Documentos\mapas metereológicos\modelos\{modelo}\{hora}')
                        try:
                            os.mkdir(f'{root_directory}\{self.data}')
                            croppedIm.save(f'{root_directory}\{self.data}\{m}-{modelo}.png')
                        except:
                            croppedIm.save(f'{root_directory}\{self.data}\{m}-{modelo}.png')
                    except Exception as erro:
                        print(erro)
                        print(f"NÃO TEM NADA AQUI")
                        pass
mapas123 = baixa_mapas()
mapas1 =['120']
modelos=['gfs-ens-suite']
horario=['00z']
mapas123.mapaesp(modelos, horario, mapas1)
